let u = { re : 1, im : 0 }
;;

let conjugate =
  fun f(z): {re:int, im:int} -> {re:int, im:int} is
    {re : z.re, im : 0 - z.im}
;;

let plus =
  fun f(z) : {re:int, im:int} -> {re:int, im:int} -> {re:int, im:int} is
  fun g(w) : {re:int, im:int} -> {re:int, im:int} is
    { re : z.re + w.re, im : z.im + w.im }
;;

plus u (conjugate u)

;;

conjugate {re : 5, im : 7, foo : {}, bar
: conjugate}
;;

let increment = fun f(x): int -> int is x + 1
;;

let id = \A:* . fun f(x): A -> A is x
;;

id [int] 3;;

id [bool] true;;
id [{a: int}] {a : 1};;

id [forall A:*. A -> A] id;;

let const = \A:*. \B:*. fun f(x): A -> B -> A is fun g(y): B -> A is x
;;
const [int] [int] 1 2;;
const [bool] [int] true 3;;

const [int] [forall A:*. A -> A] 7 id;;

let compose = \A:*. \B:*. \C:*.
    fun f1(f): (B -> C) -> (A -> B) -> (A -> C) is
    	fun f2(g): (A -> B) -> A -> C is
    	    fun f3(x): A -> C is
	    	f (g x)
;;

compose [int] [int] [int] increment increment 3

;;

let fxx = fun f1(x): (forall A:*. A -> A) -> (forall B:*. B -> B) is x [forall C:*. C -> C] x
;;
fxx id
