let u = { re = 1, im = 0 }
;;

let conjugate =
  fun f(z : {re:int, im:int}):{re:int, im:int} is
    {re = z.re, im = 0 - z.im}
;;

let plus =
  fun f(z : {re:int, im:int}) : {re:int, im:int} -> {re:int, im:int} is
  fun g(w : {re:int, im:int}) : {re:int, im:int} is
    { re = z.re + w.re, im = z.im + w.im }
;;

plus u (conjugate u)

;;

conjugate {re = 5, im = 7, foo = {}, bar = conjugate}

