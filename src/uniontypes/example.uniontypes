let u = { re : 1, im : 0 }
;;

let conjugate =
  fun f(z): {re:int, im:int} -> {re:int, im:int} is
    {re : z.re, im : 0 - z.im}
;;

let plus =
  fun f(z) : {re:int, im:int} -> {re:int, im:int} -> {re:int, im:int} is
  fun g(w) : {re:int, im:int} -> {re:int, im:int} is
    { re : z.re + w.re, im : z.im + w.im }
;;

plus u (conjugate u)

;;

conjugate {re : 5, im : 7, foo : {}, bar
: conjugate}
;;

let increment = fun f(x): int -> int is x + 1
;;

let id = \A:* . fun f(x): A -> A is x
;;

id [int] 3;;

id [bool] true;;
id [{a: int}] {a : 1};;

id [forall A:*. A -> A] id;;

let const = \A:*. \B:*. fun f(x): A -> B -> A is fun g(y): B -> A is x
;;
const [int] [int] 1 2;;
const [bool] [int] true 3;;

const [int] [forall A:*. A -> A] 7 id;;

let compose = \A:*. \B:*. \C:*.
    fun f1(f): (B -> C) -> (A -> B) -> (A -> C) is
    	fun f2(g): (A -> B) -> A -> C is
    	    fun f3(x): A -> C is
	    	f (g x)
;;

let incrementByTwo = compose [int] [int] [int] increment increment;;

incrementByTwo 3;;

let fxx = fun f1(x): (forall A:*. A -> A) -> (forall B:*. B -> B) is x [forall C:*. C -> C] x
;;
fxx id;;

# Union types.

let foo = fun f(x): (int | bool) -> int is
    match x with
    | int as y -> y + 1
    | bool as y -> 0
;;

let x = Left [int] [bool] 3 in foo x;;

let y = Right [int] [bool] true in foo y;;

let test_evaluation_of_left = let baz = 8 in let z = Left [int] [bool] (baz + 1) in let baz = 3 in match z with | int as z1 -> z1 | bool as z2 -> 0;;

let increaseNumber = fun f(x): int -> ({add: int, multiply: int} | int) -> int is
    fun g(method): ({add: int, multiply: int} | int) -> int is
    	match method with
	| {add: int, multiply: int} as method -> (x + method.add) * method.multiply
	| int as method -> (x + method)
;;

increaseNumber 7 (Left [{add: int, multiply: int}] [int] {add: 4, multiply: 10});;
increaseNumber 7 (Right [{add: int, multiply: int}] [int] 8);;

let z = foo 3;;
let z = foo true;;
let z = increaseNumber 10 3;;
let z = increaseNumber 10 {add: 1, multiply: 9};;

let applyUnionFn = fun f1(f): ((int -> int) | (bool -> int)) -> int is
    match f with
    | (int -> int) as g -> (g 2)
    | (bool -> int) as h -> (h true)
;;

let boolToInt = fun f(x): bool -> int is if x then 1 else 0;;

applyUnionFn (Left [int -> int] [bool -> int] increment);;
applyUnionFn (Right [int -> int] [bool -> int] boolToInt);;
applyUnionFn increment;;
applyUnionFn boolToInt;;

# Intersection type.

let foo = fun f(x): (int & bool) -> int is
    x.fst
;;

let x = foo {fst: 3, snd: true};;

let toggle = fun f(x): bool -> bool is
    if x then false else true
;;

let barFn = {fst: increment, snd: boolToInt};;
let bazFn = {fst: increment, snd: toggle};;

let addThree = fun f(x): int -> int is x + 3;;
barFn (Left [int] [bool] 7);;
barFn (Right [int] [bool] true);;
bazFn (Left [int] [bool] 7);;
bazFn (Right [int] [bool] true);;
# Error:
# bazFn (Right [bool] [bool] true);;

barFn 7;;
barFn true;;

{fst: addThree, snd: increment} 7;;

# Typecheck recursively.
{fst: {fst: toggle, snd: toggle}, snd: {fst: toggle, snd: increment}} 7;;
{fst: {fst: toggle, snd: toggle}, snd: {fst: toggle, snd: {fst: toggle, snd: increment}}} (Right [bool] [int] 7);;

# GADT.
let negate = {fst: fun f(x): int -> int is 0-x, snd: toggle};;

negate true;;
negate 7;;

negate (negate true);;
toggle (negate true);;
# Error:
# addThree (negate true);;

let g = fun g(x): (int | bool) -> (int | bool) is negate x
;;

# Should be (int | bool).
g (Left [int] [bool] 7);;
g (Right [int] [bool] true);;
g 7;;
g true;;

# Lexical binding.
# Should be 3, not 4.
let z = 3 in
    let lexical_fun = \A: *. fun f(x): A -> int is z in
    	let z = 4 in
	    lexical_fun [int] 0
;;

# Record containing polymorphic function applied to concrete types.
{fst: incrementByTwo, snd: toggle} 8;;

# Match on polymorphic types.
let foo = \A: *. fun f1(f): ((A -> A) | A) -> A -> A is
    fun g(x): A -> A is
    	match f with
	| (A -> A) as f2 -> (f2 x)
	| A as y -> y
;;
let bar = foo [int] increment 2;;
let bar = foo [int] 4 2;;

# Type-let.
let foo = fun f(x): (type Foo = int in Foo -> Foo) is x + 3;;
foo 7;;
id [type Bar = int in Bar] 3;;
match foo with | (type Bar = int in Bar -> Bar) as g -> g 3 | int as x -> x;;
Left [type Baz = int in Baz -> Baz] [type Baz = bool in Baz -> Baz] increment;;

# Errors.
# id [type Bar = int in Bar -> Bar] toggle;;
# let foo = fun f(x): (type Foo = bool in Foo -> Foo) is x + 3;;
# let foo = fun f(x): (type Foo = int in Foo) is x + 3;;

# # Only common attributes are fine.
# let canLayEgg = fun f(animal): {wingSpan: int, canLayEgg: bool} | {finLength: int, canLayEgg: bool} -> bool is
#     animal.canLayEgg

# # Error: animal.wingSpan

# # TODO: ADT.

# data MaybeInt = JustInt int | NothingInt

# data Maybe = Just a | Nothing

# # Can't do recursive types yet.
# # data Nat = Succ Nat | Zero
